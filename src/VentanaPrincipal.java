import java.awt.HeadlessException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Viruz
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    private static Recetas[] listas;
    private Recetas unaLista;
    
    private PasosdeRecetas[] elementos;
    
    private ConsultarRecetas consultar;
    private ModificarRecetas modificar;
    
    private int indiceListas;
    private int opcion;
    private String nombre; 
    private DefaultListModel modeloLista;
    
    public VentanaPrincipal() {
        initComponents();
        listas = new Recetas[50];
        modeloLista = new DefaultListModel();
        jList1.setModel(modeloLista);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Viruz Blog: Recetario de Cocina");

        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Viruz\\Pictures\\Logos\\res1.gif")); // NOI18N
        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Viruz\\Pictures\\Logos\\res2.gif")); // NOI18N
        jButton2.setText("Consultar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Viruz\\Pictures\\Logos\\res4.gif")); // NOI18N
        jButton3.setText("Modificar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Viruz\\Pictures\\Logos\\res3.gif")); // NOI18N
        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jInternalFrame1.setVisible(true);

        jPanel2.setPreferredSize(new java.awt.Dimension(384, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("RECETAS DISPONIBLES");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 258, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addContainerGap())
        );

        jInternalFrame1.getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jInternalFrame1.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jInternalFrame1.getContentPane().add(jScrollPane2, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jInternalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /*Método del Evento Agregar (Boton)*/
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        nombre = JOptionPane.showInputDialog (this,"Inserte el nombre de su receta");
        if (nombre == null) {
            JOptionPane.showMessageDialog(null, "Error: ¡Nombre Invalido!",  
            "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog (this, "Inserta Pasos a la Receta");
        agregarPasos();
    }//GEN-LAST:event_jButton1ActionPerformed

    /*Método del Evento Consultar (Boton)*/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese Número de Receta a Consultar"));
            Recetas laLista = listas[opcion-1];
            if (laLista != null) {
                consultar = new ConsultarRecetas(null, true, laLista);
            }else{
                JOptionPane.showMessageDialog (this, "La opción otorgada no es posible, intente de nuevo");
            }
        }catch(HeadlessException | NumberFormatException ex){
            System.err.println("Error: Invalid Input!");
            JOptionPane.showMessageDialog(null, "Error: Invalid Input!",  
            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /*Método del Evento JList para agregar Pasos sin botón de Consultar*/
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if(evt.getClickCount() == 2){
            int index = jList1.locationToIndex(evt.getPoint());
            
            Recetas laLista = listas[index];
            if (laLista != null) {
                consultar = new ConsultarRecetas(null, true, laLista);
            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    /*Método del Evento Modificar (Boton)*/
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
            opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese Número de Receta a Modificar"));
            Recetas laLista = listas[opcion-1];
            if (laLista != null) {
                modificar = new ModificarRecetas(null, true, laLista);
            }else{
                JOptionPane.showMessageDialog (this, "La opción otorgada no es posible, intente de nuevo");
            }
        }catch(HeadlessException | NumberFormatException ex){
            System.err.println("Error: Invalid Input!");
            JOptionPane.showMessageDialog(null, "Error: Invalid Input!",  
            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /*Método del Evento Eliminar (Boton)*/
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
            opcion = Integer.parseInt(JOptionPane.showInputDialog("Inserte la Receta que desea Eliminar"));
            int op2 = JOptionPane.showConfirmDialog(this, "¿Está seguro de proceder?", "Eliminar Receta", JOptionPane.YES_NO_OPTION);

            if (op2 == JOptionPane.YES_OPTION){
                if (listas[opcion-1]!= null) {
                    //Línea que elimina la Receta volviendo el valor "null"
                    listas[opcion-1] = null;
                    
                    Recetas[] listasNuevo = new Recetas[listas.length];
                    int cont1 = 0;
                    int cont2 = 0;
                    do {
                        if (listas[cont1] != null) {
                            listasNuevo[cont2] = listas[cont1];
                            cont2++;
                        }
                        cont1++;
                    }while (cont1 < listas.length);

                    //Se manda la nueva lista de recetas al método para el recorrido
                    setListas(listasNuevo);
                    eliminarRecetas(listasNuevo);

                    JOptionPane.showMessageDialog (null, "La Receta ha sido eliminada del Catálogo");
                   
                }else {
                JOptionPane.showMessageDialog (this, "La opción seleccionada es inválida");
            }
        }
        }catch(HeadlessException | NumberFormatException ex){
            System.err.println("Error: Invalid Input!");
            JOptionPane.showMessageDialog(null, "Error: Invalid Input!",  
            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    
/***************************Otros Métodos *********************************/    
    
    /*Método que se encarga de agregar pasos a las Recetas*/
    private void agregarPasos() {
        PasosdeRecetas primerNodo = new PasosdeRecetas(null);
        PasosdeRecetas nodoAux = primerNodo;
        PasosdeRecetas otroNodo = primerNodo;
        int aux = 0;
        int limite = 0;
        int contador = 0;
        int respuesta2;
        boolean primero = true;
        do { 
            String paso = JOptionPane.showInputDialog (this,"Inserte el paso "+(contador+1));
            if (paso == null) {
                JOptionPane.showMessageDialog(null, "Error: ¡Solamente se pueden ingresar Recetas con 2 o más pasos!",  
                "Error", JOptionPane.ERROR_MESSAGE);
                aux = 0;
            }
            else{
                if (primero) {
                    primerNodo.setInformacion(paso);
                    primero = false;
                }else {
                    otroNodo = new PasosdeRecetas (paso);
                }
                nodoAux.setPasos(otroNodo);
                nodoAux = otroNodo;
                contador++;
                limite++;   
            }
         }while (limite != 2 && aux == 0);
        
        do{
            respuesta2 = JOptionPane.showConfirmDialog(null, "¿Desea insertar otro paso?","¿Continuar?", JOptionPane.YES_NO_OPTION);
            if (respuesta2 == JOptionPane.NO_OPTION) {
                break;
            }
            else {
                String paso = JOptionPane.showInputDialog (this,"Inserte el paso "+(contador+1)); 
                if (paso == null) {
                    JOptionPane.showMessageDialog(null, "Error: ¡Nombre Invalido!",  
                        "Error", JOptionPane.ERROR_MESSAGE);
                        respuesta2 = 0;
                    }
                    else {
                        if (primero) {
                            primerNodo.setInformacion(paso);
                            primero = false;
                        }else {
                            otroNodo = new PasosdeRecetas (paso);
                        }
                        nodoAux.setPasos(otroNodo);
                        nodoAux = otroNodo;
                        contador++;
                    }
                }
        }while (respuesta2 == 0);
        
            elementos = new PasosdeRecetas [contador];
            otroNodo = primerNodo;
            int i = 0;
            do {
                try {
                    elementos[i] = otroNodo;
                    otroNodo = otroNodo.getPasos();
                    i++;
                }catch (Exception e) { 
                    break;
                }
            }while (otroNodo != null);
            
            nombreRecetas();
            agregarRecetas(listas);
    }
        
    private void nombreRecetas()
    {
        System.out.println("Entro al metodo nombreRecetas");
        unaLista = new Recetas (nombre, elementos);
        listas[indiceListas] = unaLista;
        indiceListas++;
    }
    
    /*Método que agrega los Elementos al JList*/
    private void agregarRecetas(Recetas[] recetas)
    {
        listas =  recetas;
        /*Se remueven todos los elementos (antes) para que no se copien de nuevo*/
        modeloLista.clear();
        jTextArea1.setText("");
//        modeloLista.removeAllElements();
        
        /*Ciclo For que nos ayuda agregar Recetas al JList*/
        for (int i = 0; i < listas.length; i++) {
            try {
                modeloLista.addElement("  " +(i + 1) + ".- " + listas[i].getNombre() + "\n\n");
                this.jTextArea1.append("   "+(i + 1) + ".- " + listas[i].getNombre()+"\n\n");
            } catch (NullPointerException e) {
                System.out.println(i);
                break;
            }
        }
    }
    
    private void eliminarRecetas(Recetas[] recetas)
    {
        listas =  recetas;
        modeloLista.clear();
        jTextArea1.setText("");
        
        for (int i = 0; i < listas.length; i++) {
            try {
                modeloLista.addElement("  " +(i + 1) + ".- " + listas[i].getNombre() + "\n\n");
                this.jTextArea1.append("   "+(i + 1) + ".- " + listas[i].getNombre()+"\n\n");
            } catch (NullPointerException e) {
                System.out.println(i);
                break;
            }
        }    
    }
    
    /* Método que Actualiza los Indices al Eliminar una Receta*/
    public void setListas (Recetas[] recetas) {
        listas = recetas;
        for (int i = 0; i < listas.length; i++) {
            if (listas == null) {
                this.indiceListas = i;
                return;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
